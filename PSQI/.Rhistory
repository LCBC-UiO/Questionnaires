hms()
df$PSQI_1
#### --- Prepping data --- ####
#assumes first column is ID column
df = DATA %>% select(1, contains("PSQI"))
#Make sure SPSS has not added strange ".0" the the end of timestamp.
#Assumes Q1 and Q3 are HH:MM:SS, will throw a warning if there are NA's, that's ok.
df$PSQI_1 = df$PSQI_1 %>%
as.character() %>%
gsub(pattern = "\\.0$",replacement = "", .) %>%
hms()
df$PSQI_3 = df$PSQI_3 %>%
as.character() %>%
gsub(pattern = "\\.0$",replacement = "", .) %>%
hms()
# Scale Q2
df$PSQI_2_scaled = ifelse(df$PSQI_2 >= 15 & df$PSQI_2 <= 30, 1,
ifelse(df$PSQI_2 >= 31 & df$PSQI_2 <= 60,2,
ifelse(df$PSQI_2 >= 60, 3, 0)))
#create a data frame to place some intermediate values
PSQI = data.frame(matrix(ncol=0, nrow=nrow(df)))
df$PSQI_4
DATA$PSQI_Comp3_Duration = ifelse(df$PSQI_4 > 7, 0,
ifelse(df$PSQI_4 >= 6 & df$PSQI_4 <= 7, 1,
ifelse(df$PSQI_4 >= 5 & df$PSQI_4 < 6, 2, 3)))
df$PSQI_1
df$PSQI_1<5
h(df$PSQI_1)<5
hour(df$PSQI_1)<5
df$PSQI_1+24
df$PSQI_1+hours(24)
ifelse(hour(df$PSQI_1)<5, df$PSQI_1+hours(24),df$PSQI_1)
hour(df$PSQI_1)<5
df$PSQI_1
df$PSQI_1+hours(24)
df$PSQI_1
ifelse(hour(df$PSQI_1)<5, df$PSQI_1+hours(24),df$PSQI_1)
t=ifelse(hour(df$PSQI_1)<5, df$PSQI_1+hours(24),df$PSQI_1)
t
hour(df$PSQI_1)<5
df %>% filter(!is.na(PSQI_1))
df = df %>% filter(!is.na(PSQI_1))
DATA = DATA %>% filter(!is.na(PSQI_1))
df = DATA %>% select(1, contains("PSQI"))
#Make sure SPSS has not added strange ".0" the the end of timestamp.
#Assumes Q1 and Q3 are HH:MM:SS, will throw a warning if there are NA's, that's ok.
df$PSQI_1 = df$PSQI_1 %>%
as.character() %>%
gsub(pattern = "\\.0$",replacement = "", .) %>%
hms()
df$PSQI_3 = df$PSQI_3 %>%
as.character() %>%
gsub(pattern = "\\.0$",replacement = "", .) %>%
hms()
# Scale Q2
df$PSQI_2_scaled = ifelse(df$PSQI_2 >= 15 & df$PSQI_2 <= 30, 1,
ifelse(df$PSQI_2 >= 31 & df$PSQI_2 <= 60,2,
ifelse(df$PSQI_2 >= 60, 3, 0)))
#create a data frame to place some intermediate values
PSQI = data.frame(matrix(ncol=0, nrow=nrow(df)))
#### --- Calculate components --- ####
#First component is assessment of sleep quality in Q6
DATA$PSQI_Comp1_SleepQuality     = df$PSQI_6
#Comp 2 is a latency score, the sum of scaled Q2 with Q5a, and then scaled
PSQI$PSQI_Comp2_sum = df$PSQI_2_scaled + df$PSQI_5a
DATA$PSQI_Comp2_Latency = ifelse(PSQI$PSQI_Comp2_sum >= 1 & PSQI$PSQI_Comp2_sum <= 2, 1,
ifelse(PSQI$PSQI_Comp2_sum >= 3 & PSQI$PSQI_Comp2_sum <= 4, 2,
ifelse(PSQI$PSQI_Comp2_sum >=5, 3, 0)))
#Component 3 is a scaling of sleep duration
DATA$PSQI_Comp3_Duration = ifelse(df$PSQI_4 > 7, 0,
ifelse(df$PSQI_4 >= 6 & df$PSQI_4 <= 7, 1,
ifelse(df$PSQI_4 >= 5 & df$PSQI_4 < 6, 2, 3)))
df
ifelse(hour(df$PSQI_1)<5, df$PSQI_1+hours(24),df$PSQI_1)
df = DATA %>% select(1, contains("PSQI"))
#Make sure SPSS has not added strange ".0" the the end of timestamp.
#Assumes Q1 and Q3 are HH:MM:SS, will throw a warning if there are NA's, that's ok.
df$PSQI_1 = df$PSQI_1 %>%
as.character() %>%
gsub(pattern = "\\.0$",replacement = "", .) %>%
hms()
df$PSQI_3 = df$PSQI_3 %>%
as.character() %>%
gsub(pattern = "\\.0$",replacement = "", .) %>%
hms()
# Scale Q2
df$PSQI_2_scaled = ifelse(df$PSQI_2 >= 15 & df$PSQI_2 <= 30, 1,
ifelse(df$PSQI_2 >= 31 & df$PSQI_2 <= 60,2,
ifelse(df$PSQI_2 >= 60, 3, 0)))
#create a data frame to place some intermediate values
PSQI = data.frame(matrix(ncol=0, nrow=nrow(df)))
#### --- Calculate components --- ####
#First component is assessment of sleep quality in Q6
DATA$PSQI_Comp1_SleepQuality     = df$PSQI_6
#Comp 2 is a latency score, the sum of scaled Q2 with Q5a, and then scaled
PSQI$PSQI_Comp2_sum = df$PSQI_2_scaled + df$PSQI_5a
DATA$PSQI_Comp2_Latency = ifelse(PSQI$PSQI_Comp2_sum >= 1 & PSQI$PSQI_Comp2_sum <= 2, 1,
ifelse(PSQI$PSQI_Comp2_sum >= 3 & PSQI$PSQI_Comp2_sum <= 4, 2,
ifelse(PSQI$PSQI_Comp2_sum >=5, 3, 0)))
#Component 3 is a scaling of sleep duration
DATA$PSQI_Comp3_Duration = ifelse(df$PSQI_4 > 7, 0,
ifelse(df$PSQI_4 >= 6 & df$PSQI_4 <= 7, 1,
ifelse(df$PSQI_4 >= 5 & df$PSQI_4 < 6, 2, 3)))
hour(df$PSQI_1)<5
hour(df$PSQI_1)<=5
df$PSQI_1
DATA$PSQI_1
hour(df$PSQI_1)<=5
df$PSQI_1+hours(24)
df$PSQI_1
ifelse(hour(df$PSQI_1)<=5, df$PSQI_1+hours(24), df$PSQI_1)
if_else(hour(df$PSQI_1)<=5, df$PSQI_1+hours(24), df$PSQI_1)
# Works sround varying punching of after midnight bedtimes (added 24hr for easy calculations)
PSQI$Bedtime = if_else(hour(df$PSQI_1)<=5, df$PSQI_1+hours(24), df$PSQI_1)
df$PSQI_3
# Adds 24hr to rising time, for easy calculation of time spent in bed
PSQI$Risingtime = df$PSQI_3+hours(24)
PSQI$TimeInBed = (PSQI$Risingtime-PSQI$Bedtime)
PSQI$TimeInBed
new_period(PSQI$Bedtime,PSQI$Risingtime)
period(PSQI$Bedtime,PSQI$Risingtime)
PSQI$Risingtime %>% as.numeric()
(PSQI$Risingtime-PSQI$Bedtime)
PSQI$TimeInBed = (as.numeric(PSQI$Risingtime)-as.numeric(PSQI$Bedtime))
PSQI$TimeInBed
PSQI$TimeInBed = minutes((as.numeric(PSQI$Risingtime)-as.numeric(PSQI$Bedtime)))
PSQI$TimeInBed
PSQI$TimeInBed = hours((as.numeric(PSQI$Risingtime)-as.numeric(PSQI$Bedtime)))
PSQI$TimeInBed
period_to_seconds(PSQI$Risingtime)
period_to_seconds(PSQI$Risingtime)
# Works sround varying punching of after midnight bedtimes (added 24hr for easy calculations)
PSQI$Bedtime = if_else(hour(df$PSQI_1)<=5, df$PSQI_1+hours(24), df$PSQI_1) %>% period_to_seconds
# Adds 24hr to rising time, for easy calculation of time spent in bed
PSQI$Risingtime = df$PSQI_3+hours(24) %>% period_to_seconds
(PSQI$Risingtime-PSQI$Bedtime)
PSQI$TimeInBed = (PSQI$Risingtime-PSQI$Bedtime)
second(PSQI$TimeInBed)
second(PSQI$TimeInBed) = 0
PSQI$TimeInBed
PSQI$Risingtime==0
as.numeric(PSQI$Risingtime )
is.na(as.numeric(PSQI$Risingtime ))
PSQI$Risingtime = if_else(is.na(as.numeric(PSQI$Risingtime )), NA, PSQI$Risingtime)
is.na(as.numeric(PSQI$Risingtime ))
PSQI$Risingtime = if_else(is.na(as.numeric(PSQI$Risingtime )), NA, PSQI$Risingtime)
PSQI$Risingtime
PSQI$TimeInBed = (PSQI$Risingtime-PSQI$Bedtime)
second(PSQI$TimeInBed)
second(PSQI$TimeInBed) = if_else(!is.na(PSQI$TimeInBed), 0, NA) #Remove seconds
PSQI$TimeInBed
PSQI$TimeInBed = (PSQI$Risingtime-PSQI$Bedtime)
!is.na(PSQI$TimeInBed)
if_else(!is.na(PSQI$TimeInBed), 0, NA)
PSQI$TimeInBed
hm( (PSQI$Risingtime-PSQI$Bedtime))
df = DATA %>% select(1, contains("PSQI"))
#Make sure SPSS has not added strange ".0" the the end of timestamp.
#Assumes Q1 and Q3 are HH:MM:SS, will throw a warning if there are NA's, that's ok.
df$PSQI_1 = df$PSQI_1 %>%
as.character() %>%
gsub(pattern = "\\.0$",replacement = "", .) %>%
hms(roll=T)
df$PSQI_3 = df$PSQI_3 %>%
as.character() %>%
gsub(pattern = "\\.0$",replacement = "", .) %>%
hms(roll=T)
df = DATA %>% select(1, contains("PSQI"))
#Make sure SPSS has not added strange ".0" the the end of timestamp.
#Assumes Q1 and Q3 are HH:MM:SS, will throw a warning if there are NA's, that's ok.
df$PSQI_1 = df$PSQI_1 %>%
as.character() %>%
gsub(pattern = "\\.0$",replacement = "", .) %>%
hms(roll=T, quiet = T)
df$PSQI_3 = df$PSQI_3 %>%
as.character() %>%
gsub(pattern = "\\.0$",replacement = "", .) %>%
hms(roll=T, quiet = T)
#### --- Prepping data --- ####
#assumes first column is ID column
df = DATA %>% select(1, contains("PSQI"))
#Make sure SPSS has not added strange ".0" the the end of timestamp.
#Assumes Q1 and Q3 are HH:MM:SS
df$PSQI_1 = df$PSQI_1 %>%
as.character() %>%
gsub(pattern = "\\.0$",replacement = "", .) %>%
hm(roll=T, quiet = T)
df$PSQI_3 = df$PSQI_3 %>%
as.character() %>%
gsub(pattern = "\\.0$",replacement = "", .) %>%
hm(roll=T, quiet = T)
df = DATA %>% select(1, contains("PSQI"))
#Make sure SPSS has not added strange ".0" the the end of timestamp.
#Assumes Q1 and Q3 are HH:MM:SS
df$PSQI_1 = df$PSQI_1 %>%
as.character() %>%
gsub(pattern = "\\.0$",replacement = "", .) %>%
hms(roll=T, quiet = T)
df$PSQI_3 = df$PSQI_3 %>%
as.character() %>%
gsub(pattern = "\\.0$",replacement = "", .) %>%
hms(roll=T, quiet = T)
df$PSQI_2_scaled = ifelse(df$PSQI_2 >= 15 & df$PSQI_2 <= 30, 1,
ifelse(df$PSQI_2 >= 31 & df$PSQI_2 <= 60,2,
ifelse(df$PSQI_2 >= 60, 3, 0)))
#create a data frame to place some intermediate values
PSQI = data.frame(matrix(ncol=0, nrow=nrow(df)))
#### --- Calculate components --- ####
#First component is assessment of sleep quality in Q6
DATA$PSQI_Comp1_SleepQuality     = df$PSQI_6
#Comp 2 is a latency score, the sum of scaled Q2 with Q5a, and then scaled
PSQI$PSQI_Comp2_sum = df$PSQI_2_scaled + df$PSQI_5a
DATA$PSQI_Comp2_Latency = ifelse(PSQI$PSQI_Comp2_sum >= 1 & PSQI$PSQI_Comp2_sum <= 2, 1,
ifelse(PSQI$PSQI_Comp2_sum >= 3 & PSQI$PSQI_Comp2_sum <= 4, 2,
ifelse(PSQI$PSQI_Comp2_sum >=5, 3, 0)))
#Component 3 is a scaling of sleep duration
DATA$PSQI_Comp3_Duration = ifelse(df$PSQI_4 > 7, 0,
ifelse(df$PSQI_4 >= 6 & df$PSQI_4 <= 7, 1,
ifelse(df$PSQI_4 >= 5 & df$PSQI_4 < 6, 2, 3)))
# Works sround varying punching of after midnight bedtimes (added 24hr for easy calculations)
PSQI$Bedtime = if_else(hour(df$PSQI_1)<=5, df$PSQI_1+hours(24), df$PSQI_1) %>% period_to_seconds
# Adds 24hr to rising time, for easy calculation of time spent in bed
PSQI$Risingtime = df$PSQI_3+hours(24) %>% period_to_seconds()
(PSQI$Risingtime-PSQI$Bedtime)
as.period(PSQI$Risingtime-PSQI$Bedtime)
as.period(PSQI$Risingtime-PSQI$Bedtime) %>% hm()
PSQI$TimeInBed = as.period(PSQI$Risingtime-PSQI$Bedtime,unit = "hours")
PSQI$TimeInBed
df$PSQI_4
hour(PSQI$TimeInBed)
hour(PSQI$TimeInBed)+(minute(PSQI$TimeInBed)/60)
hour(PSQI$TimeInBed)+(minute(PSQI$TimeInBed)/60)+second(PSQI$TimeInBed/120)
hour(PSQI$TimeInBed)+(minute(PSQI$TimeInBed)/60)+(second(PSQI$TimeInBed)/120)
hms2deciH = function(x){
require(lubridate)
t = hour(x$TimeInBed)+
(minute(x$TimeInBed)/60)+
(second(x$TimeInBed)/120)
return(x)
}
hms2deciH = function(x){
require(lubridate)
t = hour(x)+
(minute(x)/60)+
(second(x)/120)
return(x)
}
(PSQI$Risingtime-PSQI$Bedtime) %>%
as.period(unit = "hours") %>% hms2deciH()
hms2deciH = function(x){
require(lubridate)
t = hour(x)+
(minute(x)/60)+
(second(x)/120)
return(x)
}
(PSQI$Risingtime-PSQI$Bedtime) %>%
as.period(unit = "hours") %>% hms2deciH()
PSQI$TimeInBed = (PSQI$Risingtime-PSQI$Bedtime) %>%
as.period(unit = "hours")
hms2deciH(PSQI$TimeInBed)
hms2deciH(PSQI$TimeInBed)
#### --- Special function to go from hms to decimal hours --- ####
hms2deciH = function(x){
require(lubridate)
t = hour(x)+
(minute(x)/60)+
(second(x)/120)
return(t)
}
(PSQI$Risingtime-PSQI$Bedtime) %>%
as.period(unit = "hours") %>% hms2deciH()
PSQI$TimeInBed = (PSQI$Risingtime-PSQI$Bedtime) %>%
as.period(unit = "hours") %>% hms2deciH()
(df$PSQI_4/PSQI$TimeInBed)*100
df %>% select(matches("_5"))
df %>% select(matches("_5[a-j]"))
df %>% select(matches("_5[a-j]$"))
# Get all the 5-questions that are not strings.
tmp = df %>% select(matches("_5[a-j]$"))
tmp %>% head
PSQI$PSQI_Comp_5_sum = ifelse(!is.na(tmp$PSQI_5a),rowSums(tmp[,1:ncol(tmp)], na.rm=T), NA)
DATA$PSQI_Comp_5_Problems = ifelse(PSQI$PSQI_Comp_5_sum == 0, 0,
ifelse(PSQI$PSQI_Comp_5_sum >= 1 & PSQI$PSQI_Comp_5_sum < 10, 1,
ifelse(PSQI$PSQI_Comp_5_sum >= 10 & PSQI$PSQI_Comp_5_sum < 19, 2, 3)))
DATA$PSQI_Comp6_Medication = df$PSQI_7
PSQI$PSQI_Comp7_sum = rowMeans(cbind(df$PSQI_8,df$PSQI_9))*2
DATA$PSQI_Comp7_Tired = ifelse(PSQI$PSQI_Comp7_sum == 0, 0,
ifelse(PSQI$PSQI_Comp7_sum > 0 & PSQI$PSQI_Comp7_sum <= 2, 1,
ifelse(PSQI$PSQI_Comp7_sum > 2 & PSQI$PSQI_Comp7_sum <= 4, 2, 3)))
DATA$PSQI_Global = rowSums(DATA[,grep("PSQI_Comp",names(DATA))])
DATA
#### --- Prepping data --- ####
#assumes first column is ID column
df = DATA %>% select(1, contains("PSQI"))
#Make sure SPSS has not added strange ".0" the the end of timestamp.
#Assumes Q1 and Q3 are HH:MM:SS
df$PSQI_1 = df$PSQI_1 %>%
as.character() %>%
gsub(pattern = "\\.0$",replacement = "", .) %>%
hms(roll=T, quiet = T)
df$PSQI_3 = df$PSQI_3 %>%
as.character() %>%
gsub(pattern = "\\.0$",replacement = "", .) %>%
hms(roll=T, quiet = T)
# Scale Q2
df$PSQI_2_scaled = ifelse(df$PSQI_2 >= 15 & df$PSQI_2 <= 30, 1,
ifelse(df$PSQI_2 >= 31 & df$PSQI_2 <= 60,2,
ifelse(df$PSQI_2 >= 60, 3, 0)))
# Works around varying punching of after midnight bedtimes (added 24hr for easy calculations)
df$Bedtime = if_else(hour(df$PSQI_1)<=5, df$PSQI_1+hours(24), df$PSQI_1) %>% period_to_seconds
# Adds 24hr to rising time, for easy calculation of time spent in bed
df$Risingtime = df$PSQI_3+hours(24) %>% period_to_seconds()
# Calculate time spend in bed from bedtime and rising time
df$TimeInBed = (df$Risingtime-df$Bedtime) %>%
as.period(unit = "hours") %>% hms2deciH()
#### --- Special function to go from hms to decimal hours --- ####
hms2deciH = function(x){
require(lubridate)
t = hour(x)+
(minute(x)/60)+
(second(x)/120)
return(t)
}
#### --- Calculate components --- ####
#Comp 1 is assessment of sleep quality in Q6
DATA$PSQI_Comp1_SleepQuality     = df$PSQI_6
#Comp 2 is a latency score, the sum of scaled Q2 with Q5a, and then scaled
df$PSQI_Comp2_sum = df$PSQI_2_scaled + df$PSQI_5a
DATA$PSQI_Comp2_Latency = ifelse(df$PSQI_Comp2_sum >= 1 & df$PSQI_Comp2_sum <= 2, 1,
ifelse(df$PSQI_Comp2_sum >= 3 & df$PSQI_Comp2_sum <= 4, 2,
ifelse(df$PSQI_Comp2_sum >=5, 3, 0)))
#Component 3 is a scaling of sleep duration
DATA$PSQI_Comp3_Duration = ifelse(df$PSQI_4 > 7, 0,
ifelse(df$PSQI_4 >= 6 & df$PSQI_4 <= 7, 1,
ifelse(df$PSQI_4 >= 5 & df$PSQI_4 < 6, 2, 3)))
# Component 4 is a scaled indicator of sleep efficiency
df$PSQI_Comp4_Percent = (df$PSQI_4/df$TimeInBed)*100
DATA$PSQI_Comp4_Efficiency = ifelse(df$PSQI_Comp4_Percent > 85, 0,
ifelse(df$PSQI_Comp4_Percent <= 85 & df$PSQI_Comp4_Percent >= 75, 1,
ifelse( df$PSQI_Comp4_Percent < 75 & df$PSQI_Comp4_Percent >= 65, 2, 3)))
# Get all the 5-questions that are not strings. This assumes all the Q5's column names end
# with "_5" and the characters a-j in small case
tmp = df %>% select(matches("_5[a-j]$"))
df$PSQI_Comp_5_sum = ifelse(!is.na(tmp$PSQI_5a),rowSums(tmp[,1:ncol(tmp)], na.rm=T), NA)
DATA$PSQI_Comp_5_Problems = ifelse(df$PSQI_Comp_5_sum == 0, 0,
ifelse(df$PSQI_Comp_5_sum >= 1 & df$PSQI_Comp_5_sum < 10, 1,
ifelse(df$PSQI_Comp_5_sum >= 10 & df$PSQI_Comp_5_sum < 19, 2, 3)))
DATA$PSQI_Comp6_Medication = df$PSQI_7
df$PSQI_Comp7_sum = rowMeans(cbind(df$PSQI_8,df$PSQI_9))*2
DATA$PSQI_Comp7_Tired = ifelse(df$PSQI_Comp7_sum == 0, 0,
ifelse(df$PSQI_Comp7_sum > 0 & df$PSQI_Comp7_sum <= 2, 1,
ifelse(df$PSQI_Comp7_sum > 2 & df$PSQI_Comp7_sum <= 4, 2, 3)))
DATA$PSQI_Global = rowSums(DATA[,grep("PSQI_Comp",names(DATA))])
rm(PSQI,df,tmp)
rm(t)
#### --- Prepping data --- ####
#assumes first column is ID column
df = DATA %>% select(1, contains("PSQI"))
#Make sure SPSS has not added strange ".0" the the end of timestamp.
#Assumes Q1 and Q3 are HH:MM:SS
df$PSQI_1 = df$PSQI_1 %>%
as.character() %>%
gsub(pattern = "\\.0$",replacement = "", .) %>%
hms(roll=T, quiet = T)
df$PSQI_3 = df$PSQI_3 %>%
as.character() %>%
gsub(pattern = "\\.0$",replacement = "", .) %>%
hms(roll=T, quiet = T)
# Scale Q2
df$PSQI_2_scaled = ifelse(df$PSQI_2 >= 15 & df$PSQI_2 <= 30, 1,
ifelse(df$PSQI_2 >= 31 & df$PSQI_2 <= 60,2,
ifelse(df$PSQI_2 >= 60, 3, 0)))
# Works around varying punching of after midnight bedtimes (added 24hr for easy calculations)
df$Bedtime = if_else(hour(df$PSQI_1)<=5, df$PSQI_1+hours(24), df$PSQI_1) %>% period_to_seconds
# Adds 24hr to rising time, for easy calculation of time spent in bed
df$Risingtime = df$PSQI_3+hours(24) %>% period_to_seconds()
# Calculate time spend in bed from bedtime and rising time
df$TimeInBed = (df$Risingtime-df$Bedtime) %>%
as.period(unit = "hours") %>% hms2deciH()
#### --- Special function to go from hms to decimal hours --- ####
hms2deciH = function(x){
require(lubridate)
t = hour(x)+
(minute(x)/60)+
(second(x)/120)
return(t)
}
#### --- Calculate components --- ####
#Comp 1 is assessment of sleep quality in Q6
DATA$PSQI_Comp1_SleepQuality     = df$PSQI_6
#Comp 2 is a latency score, the sum of scaled Q2 with Q5a, and then scaled
df$PSQI_Comp2_sum = df$PSQI_2_scaled + df$PSQI_5a
DATA$PSQI_Comp2_Latency = ifelse(df$PSQI_Comp2_sum >= 1 & df$PSQI_Comp2_sum <= 2, 1,
ifelse(df$PSQI_Comp2_sum >= 3 & df$PSQI_Comp2_sum <= 4, 2,
ifelse(df$PSQI_Comp2_sum >=5, 3, 0)))
#Component 3 is a scaling of sleep duration
DATA$PSQI_Comp3_Duration = ifelse(df$PSQI_4 > 7, 0,
ifelse(df$PSQI_4 >= 6 & df$PSQI_4 <= 7, 1,
ifelse(df$PSQI_4 >= 5 & df$PSQI_4 < 6, 2, 3)))
# Component 4 is a scaled indicator of sleep efficiency
df$PSQI_Comp4_Percent = (df$PSQI_4/df$TimeInBed)*100
DATA$PSQI_Comp4_Efficiency = ifelse(df$PSQI_Comp4_Percent > 85, 0,
ifelse(df$PSQI_Comp4_Percent <= 85 & df$PSQI_Comp4_Percent >= 75, 1,
ifelse( df$PSQI_Comp4_Percent < 75 & df$PSQI_Comp4_Percent >= 65, 2, 3)))
# Get all the 5-questions that are not strings. This assumes all the Q5's column names end
# with "_5" and the characters a-j in small case
tmp = df %>% select(matches("_5[a-j]$"))
df$PSQI_Comp_5_sum = ifelse(!is.na(tmp$PSQI_5a),rowSums(tmp[,1:ncol(tmp)], na.rm=T), NA)
DATA$PSQI_Comp_5_Problems = ifelse(df$PSQI_Comp_5_sum == 0, 0,
ifelse(df$PSQI_Comp_5_sum >= 1 & df$PSQI_Comp_5_sum < 10, 1,
ifelse(df$PSQI_Comp_5_sum >= 10 & df$PSQI_Comp_5_sum < 19, 2, 3)))
DATA$PSQI_Comp6_Medication = df$PSQI_7
df$PSQI_Comp7_sum = rowMeans(cbind(df$PSQI_8,df$PSQI_9))*2
DATA$PSQI_Comp7_Tired = ifelse(df$PSQI_Comp7_sum == 0, 0,
ifelse(df$PSQI_Comp7_sum > 0 & df$PSQI_Comp7_sum <= 2, 1,
ifelse(df$PSQI_Comp7_sum > 2 & df$PSQI_Comp7_sum <= 4, 2, 3)))
DATA$PSQI_Global = rowSums(DATA[,grep("PSQI_Comp",names(DATA))])
DATA %>% select(contains("PSQI_Comp"))
DATA %>% select(contains("PSQI_Comp")) %>% head
DATA %>% select(contains("PSQI_glo")) %>% head
DATA$PSQI_Global = DATA %>% select(contains("PSQI_Comp")) %>% rowSums(na.rm=T)
DATA %>% select(contains("PSQI_glo")) %>% head
DATA$PSQI_Global = DATA %>% select(contains("PSQI_Comp")) %>% rowSums()
DATA %>% select(contains("PSQI_glo")) %>% head
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
df %>% names
#### --- Prepping data --- ####
# assumes first column is ID column
df = DATA %>% select(contains("PSQI"))
df %>% names
#### --- Prepping data --- ####
# assumes first column is ID column
df = DATA %>% select(matches("PSQI_[0-9]"))
df %>% names
df$PSQI_10
df$PSQI_10a
Fact_PSQI = function(DATA, Q4="dec"){
require(tidyverse); require(lubridate)
#### --- Special function to go from hms to decimal hours --- ####
hms2deciH = function(x){
require(lubridate)
t = hour(x)+
(minute(x)/60)+
(second(x)/120)
return(t)
}
#### --- Prepping data --- ####
# assumes first column is ID column
df = DATA %>% select(contains("PSQI"))
# Make sure SPSS has not added strange ".0" the the end of timestamp.
# Assumes Q1 and Q3 are HH:MM:SS
df$PSQI_1 = df$PSQI_1 %>%
as.character() %>%
gsub(pattern = "\\.0$",replacement = "", .) %>%
hms(roll=T, quiet = T)
df$PSQI_3 = df$PSQI_3 %>%
as.character() %>%
gsub(pattern = "\\.0$",replacement = "", .) %>%
hms(roll=T, quiet = T)
# Scale Q2
df$PSQI_2_scaled = ifelse(df$PSQI_2 >= 15 & df$PSQI_2 <= 30, 1,
ifelse(df$PSQI_2 >= 31 & df$PSQI_2 <= 60,2,
ifelse(df$PSQI_2 >= 60, 3, 0)))
# If Q4 is punched as HH:MM, convert to decminal hours
if(Q4=="time"){
df$PSQI_4 = df$PSQI_4 %>% hms() %>% hms2deciH()
}
# Works around varying punching of after midnight bedtimes (added 24hr for easy calculations)
df$Bedtime = if_else(hour(df$PSQI_1)<=5, df$PSQI_1+hours(24), df$PSQI_1) %>% period_to_seconds
# Adds 24hr to rising time, for easy calculation of time spent in bed
df$Risingtime = df$PSQI_3+hours(24) %>% period_to_seconds()
# Calculate time spend in bed from bedtime and rising time
df$TimeInBed = (df$Risingtime-df$Bedtime) %>%
as.period(unit = "hours") %>% hms2deciH()
#### --- Calculate components --- ####
# Component 1 is assessment of sleep quality in Q6
DATA$PSQI_Comp1_SleepQuality     = df$PSQI_6
# Component 2 is a latency score, the sum of scaled Q2 with Q5a, and then scaled
df$PSQI_Comp2_sum = df$PSQI_2_scaled + df$PSQI_5a
DATA$PSQI_Comp2_Latency = ifelse(df$PSQI_Comp2_sum >= 1 & df$PSQI_Comp2_sum <= 2, 1,
ifelse(df$PSQI_Comp2_sum >= 3 & df$PSQI_Comp2_sum <= 4, 2,
ifelse(df$PSQI_Comp2_sum >=5, 3, 0)))
# Component 3 is a scaling of sleep duration
DATA$PSQI_Comp3_Duration = ifelse(df$PSQI_4 > 7, 0,
ifelse(df$PSQI_4 >= 6 & df$PSQI_4 <= 7, 1,
ifelse(df$PSQI_4 >= 5 & df$PSQI_4 < 6, 2, 3)))
# Component 4 is a scaled indicator of sleep efficiency
df$PSQI_Comp4_Percent = (df$PSQI_4/df$TimeInBed)*100
DATA$PSQI_Comp4_Efficiency = ifelse(df$PSQI_Comp4_Percent > 85, 0,
ifelse(df$PSQI_Comp4_Percent <= 85 & df$PSQI_Comp4_Percent >= 75, 1,
ifelse( df$PSQI_Comp4_Percent < 75 & df$PSQI_Comp4_Percent >= 65, 2, 3)))
# Get all the 5-questions that are not strings. This assumes all the Q5's column names end
# with "_5" and the characters a-j in small case
tmp = df %>% select(matches("_5[a-j]$"))
df$PSQI_Comp_5_sum = ifelse(!is.na(tmp$PSQI_5a),rowSums(tmp[,1:ncol(tmp)], na.rm=T), NA)
DATA$PSQI_Comp_5_Problems = ifelse(df$PSQI_Comp_5_sum == 0, 0,
ifelse(df$PSQI_Comp_5_sum >= 1 & df$PSQI_Comp_5_sum < 10, 1,
ifelse(df$PSQI_Comp_5_sum >= 10 & df$PSQI_Comp_5_sum < 19, 2, 3)))
DATA$PSQI_Comp6_Medication = df$PSQI_7
df$PSQI_Comp7_sum = rowMeans(cbind(df$PSQI_8,df$PSQI_9))*2
DATA$PSQI_Comp7_Tired = ifelse(df$PSQI_Comp7_sum == 0, 0,
ifelse(df$PSQI_Comp7_sum > 0 & df$PSQI_Comp7_sum <= 2, 1,
ifelse(df$PSQI_Comp7_sum > 2 & df$PSQI_Comp7_sum <= 4, 2, 3)))
DATA$PSQI_Global = DATA %>% select(contains("PSQI_Comp")) %>% rowSums()
#Return the entire incoming data with the new values added
return(DATA)
}
